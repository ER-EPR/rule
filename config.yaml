# 必读！！！
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 跑裸核用户请自行去掉下方控制面板模块的注释。
# http/sock5代理
authentication:
- Clash:hboo7BuE
# 规则文件URL
geox-url:
  mmdb: https://testingcf.jsdelivr.net/gh/alecthw/mmdb_china_ip_list@release/lite/Country.mmdb
  geoip: https://testingcf.jsdelivr.net/gh/Loyalsoldier/v2ray-rules-dat@release/geoip.dat
  geosite: https://testingcf.jsdelivr.net/gh/Loyalsoldier/v2ray-rules-dat@release/geosite.dat
  asn: https://testingcf.jsdelivr.net/gh/xishang0128/geoip@release/GeoLite2-ASN.mmdb
# 机场订阅
proxy-providers:

  Airport3:
    url: "http://192.168.8.2:8299/api/file/mihomo"
    type: http
    interval: 3600
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    #override:
      #additional-prefix: "前缀 |"
      #additional-suffix: "| 后缀"
      
# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: true
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板，external-ui 路径如果出现报错，根据你使用的插件进行调整，比如openclash改为： /etc/openclash/run  ，裸核跑改为/etc/mihomo/run
# 因容易造成新手面板启动问题，我注释掉了，需要的自行开启
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "/etc/nikki/run"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true

  sniff:
    QUIC:
      ports:
      - 443
    TLS:
      ports:
      - 443
      - 8443
    HTTP:
      ports:
      - 80
      - 8080-8880
      override-destination: true
  force-domain:
  - "+.netflix.com"
  - "+.nflxvideo.net"
  - "+.amazonaws.com"
  - "+.media.dssott.com"
  skip-domain:
  - "+.apple.com"
  - Mijia Cloud
  - dlg.io.mi.com
  - "+.oray.com"
  - "+.sunlogin.net"
  - "+.push.apple.com"
  parse-pure-ip: true
  force-dns-mapping: true
  #- geosite:cn
  skip-src-address: # 对于来源ip跳过嗅探
  - 192.168.8.2/32
  

# 入站  
#tun:
#  enable: true
  # system/gvisor/mixed
 # stack: mixed
  #dns-hijack: ["any:53", "tcp://any:53"]
  #auto-route: true
  #auto-redirect: true
  #auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:7874
  ipv6: true
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
  - rule-set:private_domain,cn_domain
  - "+.msftconnecttest.com"
  - "+.msftncsi.com"
  - "time.*.com"
  - "*.henhaoji.site"
  - "*.savorcare.com"
  default-nameserver:
  - 223.5.5.5
  proxy-server-nameserver:
  - https://223.5.5.5/dns-query
  nameserver:
  - 223.5.5.5
  - 119.29.29.29

# 出站策略 smart参数 （ uselightgbm: false, collectdata: false, strategy: sticky-sessions,policy-priority: "Premium:0.9;SG:1.3" ）
# 没有再使用锚点，是考虑很多新手修改难度，这样新手修改某个分组更容易些。
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [🔯 香港故转, 🔯 电移故转, 🔯 日本故转, 🔯 韩国故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 📹 YouTube, type: select, proxies: [🔯 美国故转, 🔯 香港故转, 🔯 电移故转, 🔯 日本故转, 🔯 韩国故转, 🔯 狮城故转, ♻️ 智能选择, ♻️ 美国智能, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 🍀 Google, type: select, proxies: [🔯 香港故转, 🔯 电移故转, 🔯 日本故转, 🔯 韩国故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 🤖 ChatGPT, type: select, proxies: [🔯 日本故转, 🔯 韩国故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 💰 Crypto, type: select, proxies: [🔯 日本故转, 🔯 韩国故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 香港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 💻 Container, type: select, proxies: [🔯 日本故转, 🔯 韩国故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [🔯 香港故转, 🔯 电移故转, 🔯 韩国故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 🐬 OneDrive, type: select, proxies: [🔯 韩国故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 𝕏 twitter, type: select, proxies: [🔯 韩国故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 🪟 Microsoft, type: select, proxies: [🔯 韩国故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 📲 Telegram, type: select, proxies: [🔯 香港故转, 🔯 电移故转, 🔯 韩国故转, 🔯 日本故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 🎥 NETFLIX, type: select, proxies: [🔯 狮城故转, 🔯 电移故转, 🔯 香港故转, 🔯 韩国故转, 🔯 日本故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: ✈️ Speedtest, type: select, proxies: [🔯 电移故转, 🔯 香港故转, 🔯 日本故转, 🔯 韩国故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 💶 PayPal, type: select, proxies: [🔯 日本故转, 🔯 电移故转, 🔯 香港故转, 🔯 韩国故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 🍎 Apple, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [🔯 电移故转, 🔯 香港故转, 🔯 日本故转, 🔯 韩国故转, 🔯 狮城故转, 🔯 美国故转, ♻️ 智能选择, ♻️ 香港智能, ♻️ 韩国智能, ♻️ 非港智能, ♻️ 加密智能, ♻️ 狮城智能, ♻️ 美国智能, ♻️ 自动选择, 🇭🇰 香港节点, 🇮🇹 电信移动, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇰🇷 韩国节点, 🇺🇲 美国节点, 🌐 全部节点, 直连]}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|HK|hongkong|hong kong"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|JP|japan"}
  - {name: 🇸🇬 狮城节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|SG|Singapore"}
  - {name: 🇰🇷 韩国节点, type: select, include-all: true, filter: "(?i)韩|KR|korea|southkorea"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|US|unitedstates|united states"}
  - {name: 🇮🇹 电信移动, type: select, include-all: true, filter: "(?i)CMCC|CT"}
  - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|美)).)*$"}
  - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: 🔯 狮城故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(台|日|韩|港|美)).)*$"}
  - {name: 🔯 韩国故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(韩|KR|korea|southkorea))^((?!(台|日|新|港|美)).)*$"}
  - {name: 🔯 美国故转, type: fallback, include-all: true, tolerance: 20, interval: 150, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|韩|新|日|加)).)*$" }
  - {name: 🔯 电移故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(CMCC|CT))^((?!(美|港|台|韩|新|日|加)).)*$" }
  - {name: ♻️ 香港智能, type: smart, uselightgbm: true, collectdata: true, include-all: true, interval: 120, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|美)).)*$"}
  - {name: ♻️ 加密智能, type: smart, uselightgbm: true, collectdata: true, include-all: true, interval: 120, filter: "^((?!(直连|英|法|新|港|美|加|GB|FR|SG|HK|US|CA)).)*$" }
  - {name: ♻️ 狮城智能, type: smart, uselightgbm: true, collectdata: false, include-all: true, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(港|台|韩|日|美)).)*$" }
  - {name: ♻️ 韩国智能, type: smart, uselightgbm: true, collectdata: false, include-all: true, interval: 300, filter: "(?=.*(韩|KR|korea|southkorea))^((?!(港|台|新|日|美)).)*$" }
  - {name: ♻️ 美国智能, type: smart, uselightgbm: true, collectdata: true, include-all: true, interval: 120, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新|加)).)*$"}
  - {name: ♻️ 非港智能, type: smart, uselightgbm: true, collectdata: true, include-all: true, interval: 300, filter: "^((?!(直连|港|HK)).)*$" }
  - {name: ♻️ 智能选择, type: smart, uselightgbm: true, collectdata: true, include-all: true, interval: 300, filter: "^((?!(直连|CFnat)).)*$"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连|CFnat)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true, filter: "^((?!(CFnat)).)*$"}

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
#  - DOMAIN-SUFFIX,n26.com,🌐 全部节点
  - RULE-SET,private_domain,直连
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,require_direct,直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET, require_proxy,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,bing,🤖 ChatGPT
  - RULE-SET,require_hk,♻️ 香港智能
  - RULE-SET,crypto_domain,💰 Crypto
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
#  - RULE-SET,tiktok_domain,🎵 TikTok
#  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
#  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,x_domain,𝕏 twitter
  - RULE-SET,container_domain,💻 Container
  - RULE-SET,gfw_domain,🚀 默认代理
#  - RULE-SET,geolocation-!cn,🐟 漏网之鱼
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  require_hk: { <<: *class, url: "https://raw.githubusercontent.com/ER-EPR/rule/refs/heads/main/HK.list"}
  require_direct: { <<: *class, url: "https://raw.githubusercontent.com/ER-EPR/rule/refs/heads/main/direct.list"}
  require_proxy: { <<: *class, url: "https://raw.githubusercontent.com/ER-EPR/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  bing: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/bing.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  container_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-container.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  x_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/x.mrs"}
  crypto_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-cryptocurrency.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
